if (not debug) then error("(Roy's UI Library) => This executor can not use debug functions.") end

print("(Roy's UI Library @ Line #) => Prints and errors for this library will follow this format.")

local Service = function(ServiceName) return game:GetService(ServiceName) end
local CRef = cloneref or (function(o) return o end)

local Defines = {
	UserInputService = CRef(Service("UserInputService")),
	Players = CRef(Service("Players")),
	CoreGui = CRef(Service("CoreGui")),
	RunService = CRef(Service("RunService")),
	TweenService = CRef(Service("TweenService")),
		
	HideGui = get_hidden_gui or gethui,
	Request = (syn and syn.request) or (http and http.request) or http_request or request or httprequest,
	GetCAsset = getcustomasset or getsynasset,
	IsFolder = isfolder or syn_isfolder or is_folder,
	MakeFolder = makefolder or make_folder or createfolder or create_folder,
	WriteFile = writefile
	
}

local UI = {
	UIPort = nil,
	_Flags = {}
}

UI.Flags = UI._Flags

local Constants = {
	NumberValueRange = {
		Min = -1.7976931348623157e308, 
		Max = 1.7976931348623157e308
	},
	ValueType = {
		Nil = "nil",
		None = "nil",
		Bool = "boolean",
		Boolean = "boolean",
		Number = "number",
		String = "string",
		Function = "function",
		Userdata = "userdata",
		Thread = "thread",
		Table = "table",
		Array = "table",
		Vector3 = "vector3",
		Instance = "instance",
		Vector2 = "vector2"
	},
	DropIdx = 9495,
	Util = {},
	Mouse = Defines.Players.LocalPlayer:GetMouse(),
	DirectoryName = "RoysUILib",
	DefaultTheme = {
		Primary = Color3.fromRGB(80, 0, 0),
		Secondary = Color3.fromRGB(0, 80, 0),
		Tertiary = Color3.fromRGB(0, 80, 255),
		Divider = Color3.fromRGB(255, 80, 0),
		TitleText = Color3.fromRGB(255, 255, 0), 
		Hovering = Color3.fromRGB(255, 255, 255),
		Accent = Color3.fromRGB(255, 0, 255),
		AccentDivider = Color3.fromRGB(112, 0, 255),
		AccentText = Color3.fromRGB(189, 46, 94),
		DarkerAccent = Color3.fromRGB(14, 26, 94)
	}
}

function Constants.Util:Create(_Instance, _Properties, _Children)
	local callerline = "Line "..debug.info(2, 'l')
	
	local __Instance = Instance.new(_Instance)
	local __Properties = _Properties or {}
	local __Children = _Children or {}
	
	local BLProperties = {
		BorderSizePixel = 0,
		Text = "",
		BackgroundColor3 = Color3.fromRGB(255,255,255)
	}
	
	for BLP, Val in pairs(BLProperties) do
		pcall(function() __Instance[BLP] = Val end)
	end
	
	for P, Val in pairs(__Properties) do 
		__Instance[P] = Val 
	end
	
	for _, Child in pairs(__Children) do
		Child.Parent = __Instance
	end
	
	return __Instance
end

function Constants.Util:Round(_Number, _Decimal)
	local callerline = "Line "..debug.info(2, 'l')
	
	local __Decimal = 1 / _Decimal
	return math.round(_Number * __Decimal) / __Decimal
end

function Constants.Util:IsFloat(_Number)
	local callerline = "Line "..debug.info(2, 'l')
	
	return _Number ~= math.floor(_Number)
end

function Constants.Util:Tween(_Instance, _Speed, _Properties, _Style, _Direction)
	local callerline = "Line "..debug.info(2, 'l')
	
	local __Instance = _Instance or error("(Constants.Util:Tween @ "..callerline..") => '_Instance' parameter expects an instance")
	local __Speed = _Speed or 0.125
	local __Properties = typeof(_Properties) == (Constants.ValueType.Table and _Properties) or error("(Constants.Util:Tween @ "..callerline..") => '_Properties' parameter must be a table, not "..typeof(_Properties))
	local __Style = _Style or Enum.EasingStyle.Linear
	local __Direction = _Direction or Enum.EasingDirection.Out
	
	local Tween = Defines.TweenService:Create(__Instance, TweenInfo.new(__Speed, __Style, __Direction), __Properties)
	Tween:Play()
	
	return Tween
end

function Constants.Util:GetXY(UIElement)
	local S = UIElement.AbsoluteSize
	local P = Vector2.new(
		math.clamp(Constants.Mouse.X - UIElement.AbsolutePosition.X, 0, S.X),
		math.clamp(Constants.Mouse.Y, 0, S.Y)
	)
	return Vector2.new((P.X/S.X), (P.Y/S.Y))
end

function Constants.Util:GetMouse()
	local P = Defines.UserInputService:GetMouseLocation()
	return Vector2.new((P.X + 1), (P.Y - 35))
end

if not Defines.IsFolder(Constants.DirectoryName) then
	Defines.MakeFolder(Constants.DirectoryName)
	
	local Imports = {
		["Arrow"] = {"png", Defines.Request({Url = "https://raw.githubusercontent.com/Rain-Design/bitchui/main/Dropdown.png", Method = "GET"})},
		["Resize"] = {"png", Defines.Request({Url = "https://raw.githubusercontent.com/Rain-Design/bitchui/main/resize.png", Method = "GET"})}
	}
	
	for Import, Imported in pairs(Imports) do
		Defines.WriteFile(Constants.DirectoryName.."/"..Import.."."..Imported[1], Imported[2].Body)
	end
end

function UI:Window(Parameters)
	Parameters.Text = Parameters.Text or "Window"
	
	local WinTable = {}
	WinTable.__index = WinTable
	
	self.Tabs = 0
	self.Hovering = 0
	
	local SelectedTab = nil
	
	local Window = Constants.Util:Create(
		"ScreenGui",
		{
			Name = "Roy's UI Library Demo",
			ZIndexBehavior = Enum.ZIndexBehavior.Global
		}, 
		{
			Constants.Util:Create(
				"Frame",
				{
					Name = "Main",
					Size = UDim2.new(0, 600, 0, 400),
					Position = UDim2.new(0, 40, 0, 120),
					BackgroundColor3 = Color3.fromRGB(255,255,255),
					ClipsDescendants = true
				},
				{
					Constants.Util:Create(
						"UIGradient",
						{
							Color = ColorSequence.new(
								{
									ColorSequenceKeypoint.new(0, Constants.DefaultTheme.Primary),
									ColorSequenceKeypoint.new(1, Color3.new(Constants.DefaultTheme.Primary.R-15, Constants.DefaultTheme.Primary.G-15, Constants.DefaultTheme.Primary.B-15))
								}
							),
							Offset = Vector2.new(0, 0.65),
							Rotation = 90
						}
					),
					Constants.Util:Create(
						"Frame",
						{
							Name = "Containers",
							Size = UDim2.new(1, 0, 1, -50),
							Position = UDim2.new(0, 0 ,0 ,26),
							BackgroundTransparency = 1
						}
					),
					Constants.Util:Create(
						"Frame",
						{
							Name = "Bottom",
							Size = UDim2.new(1, 0, 0, 24),
							AnchorPoint = Vector2.new(.5, 1),
							Position = UDim2.new(.5, 0, 1, 0),
							BackgroundColor3 = Constants.DefaultTheme.Secondary,
							ZIndex = Constants.DropIdx + 5
						},
						{
							Constants.Util:Create(
								"Frame",
								{
									Name = "Divider",
									Size = UDim2.new(1, 0, 0, 1),
									AnchorPoint = Vector2.new(.5, 0),
									BackgroundColor3 = Constants.DefaultTheme.Divider,
									Position = UDim2.new(.5, 0, 0, 0),
									ZIndex = Constants.DropIdx + 5
								}
							),
							Constants.Util:Create(
								"ImageLabel",
								{
									Name = "ResizeIcon",
									Size = UDim2.new(0, 10, 0, 10),
									BackgroundTransparency = 1,
									Image = Defines.GetCAsset(Constants.DirectoryName.."/Resize.png"),
									AnchorPoint = Vector2.new(1, 1),
									Position = UDim2.new(1, 0, 1, 0),
									ZIndex = Constants.DropIdx + 5
								},
								{
									Constants.Util:Create(
										"TextButton",
										{
											Name = "ResizeButton",
											Size = UDim2.new(0, 10, 0, 10),
											BackgroundTransparency = 1,
											ZIndex = Constants.DropIdx + 5
										}
									)
								}
							),
							Constants.Util:Create(
								"TextLabel",
								{
									Name = "BottomText",
									Text = Parameters.Text,
									Size = UDim2.new(1, -10, 0, 24),
									BackgroundTransparency = 1,
									Position = UDim2.new(0, 8, 0, 0),
									RichText = true,
									TextXAlignment = Enum.TextXAlignment.Left,
									TextSize = 13,
									Font = Enum.Font.SourceSansBold,
									TextColor3 = Constants.DefaultTheme.PrimaryText,
									ZIndex = Constants.DropIdx + 5
								}
							)
						}
					),
					Constants.Util:Create(
						"Frame",
						{
							Name = "Topbar",
							AnchorPoint = Vector2.new(0.5, 0),
							Position = UDim2.new(.5, 0, 0, 0),
							BackgroundColor3 = Constants.DefaultTheme.Secondary,
							Size = UDim2.new(1, 0, 0, 26)
						},
						{
							Constants.Util:Create(
								"Frame",
								{
									Name = "Divider",
									Size = UDim2.new(1, 0, 0, 1),
									BackgroundColor3 = Constants.DefaultTheme.Divider,
									AnchorPoint = Vector2.new(0.5, 1),
									ZIndex = 2,
									Position = UDim2.new(.5, 0, 1, 0)
								}
							),
							Constants.Util:Create(
								"Frame",
								{
									Name = "TabContainer",
									Size = UDim2.new(1, 0, 0, 26),
									BackgroundTransparency = 1,
									ClipsDescendants = true
								},
								{
									Constants.Util:Create(
										"UIListLayout",
										{
											FillDirection = Enum.FillDirection.Horizontal
										}
									)
								}
							)
						}
					)
				}
			)
		}
	)
	
	Defines.UserInputService.InputBegan:Connect(function(Input, GameProcessed)
		if Input.KeyCode == Enum.KeyCode.Insert and not GameProcessed then
			Window.Main.Visible = not Window.Main.Visible
		end
	end)
	
	if Defines.HideGui then
		Window.Parent = Defines.HideGui()
	else
		Window.Parent = Defines.CoreGui
	end
	
	local Resizer = Window.Main.Bottom.ResizeIcon.ResizeButton
	local TabContainer = Window.Main.Topbar.TabContainer
	local Containers = Window.Main.Containers
	
	local SX = Instance.new("NumberValue", Window.Main)
	local SY = Instance.new("NumberValue", Window.Main)
	SX.Name = "X"
	SY.Name = "Y"
	
	local function ResizeTabs()
		local TabSize = 1 / self.Tabs

		task.spawn(function()
			for _, v in pairs(TabContainer:GetChildren()) do
				if v.ClassName == "Frame" then
					v.Size = UDim2.new(TabSize, 0, 0, 26)
				end
			end
		end)
	end
	
	local function Resize()
		local MouseLocation = Constants.Util:GetMouse()
		local X = math.clamp(MouseLocation.X - Window.Main.AbsolutePosition.X, 300, 1300)
		local Y = math.clamp(MouseLocation.Y - Window.Main.AbsolutePosition.Y, 165, 730)

		SX.Value = X
		SY.Value = Y

		Constants.Util:Tween(Window.Main, .05, {Size = UDim2.new(0, X, 0, Y)})

		ResizeTabs()
	end
	
	Resizer.MouseButton1Down:Connect(function()
		local ResizeMove, ResizeKill

		Constants.Util:Tween(Window.Main.Bottom.ResizeIcon, .125, {ImageColor3 = Constants.DefaultTheme.Accent})

		ResizeMove = Constants.Mouse.Move:Connect(function()
			Resize()
		end)

		ResizeKill = Defines.UserInputService.InputEnded:Connect(function(UserInput)
			if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
				ResizeMove:Disconnect()
				ResizeKill:Disconnect()

				Constants.Util:Tween(Window.Main.Bottom.ResizeIcon, .125, {ImageColor3 = Color3.fromRGB(255, 255, 255)})
			end
		end)
	end)
	
	TabContainer.ChildAdded:Connect(function()
		self.Tabs = self.Tabs + 1

		ResizeTabs()
	end)
	
	local dragging = false
	local dragInput, mousePos, framePos
	Window.Main.InputBegan:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseButton1 then
			dragging = true
			mousePos = input.Position
			framePos = Window.Main.Position

			input.Changed:Connect(function()
				if input.UserInputState == Enum.UserInputState.End then
					dragging = false
				end
			end)
		end
	end)
	
	Window.Main.InputChanged:Connect(function(input)
		if input.UserInputType == Enum.UserInputType.MouseMovement then
			dragInput = input
		end
	end)

	Defines.UserInputService.InputChanged:Connect(function(input)
		if input == dragInput and dragging then
			local delta = input.Position - mousePos
			Window.Main.Position  = UDim2.new(framePos.X.Scale, framePos.X.Offset + delta.X, framePos.Y.Scale, framePos.Y.Offset + delta.Y)
		end
	end)
	
	function WinTable:Exit()
		Window:Destroy()
	end

	function WinTable:Toggle()
		Window.Enabled = not Window.Enabled
	end
	
	function WinTable:Tab(Parameters)
		Parameters.Text = Parameters.Text or "Tab"
		
		local TabTable = {}
		
		local Tab = Constants.Util:Create(
			"Frame",
			{
				Name = "Tab",
				Parent = TabContainer,
				Size = UDim2.new(0, 200, 0, 26),
				BackgroundTransparency = 1
			},
			{
				Constants.Util:Create(
					"Frame",
					{
						Name = "Divider",
						AnchorPoint = Vector2.new(.5, 1),
						Position = UDim2.new(.5, 0, 1, 0),
						Size = UDim2.new(1, 0, 0, 1),
						ZIndex = 3,
						BackgroundColor3 = Constants.DefaultTheme.Divider
					}
				),
				Constants.Util:Create(
					"TextLabel",
					{
						Name = "TabText",
						BackgroundTransparency = 1,
						Size = UDim2.new(1, 0, 1, 0),
						Text = Parameters.Text,
						RichText = true,
						Font = Enum.Font.SourceSansBold,
						TextColor3 = Constants.DefaultTheme.SecondaryText,
						TextSize = 14,
						ZIndex = 2
					}
				),
				Constants.Util:Create(
					"TextButton",
					{
						Name = "TabButton",
						Size = UDim2.new(1, 0, 1, 0),
						BackgroundTransparency = 1
					}
				)
			}
		)
		
		ResizeTabs()
		
		local ContainerHolder = Constants.Util:Create(
			"Frame",
			{
				Name = "ContainerHolder",
				Size = UDim2.new(1, 0, 1, 0),
				Parent = Containers,
				BackgroundTransparency = 1
			},
			{
				Constants.Util:Create(
					"UIListLayout",
					{
						FillDirection = Enum.FillDirection.Horizontal
					}
				)
			}
		)
		
		local Left = Constants.Util:Create(
			"ScrollingFrame",
			{
				Name = "Left",
				BackgroundTransparency = 1,
				Visible = false,
				BackgroundColor3 = Color3.fromRGB(167, 54, 54),
				CanvasSize = UDim2.new(0, 0, 0, 0),
				AutomaticCanvasSize = Enum.AutomaticSize.Y,
				ClipsDescendants = false,
				ScrollBarThickness = 0,
				Parent = ContainerHolder,
				Size = UDim2.new(.5, 0, 0, 350)
			},
			{
				Constants.Util:Create(
					"UIListLayout"
				),
				Constants.Util:Create(
					"UIPadding",
					{
						PaddingLeft = UDim.new(0, 8)
					}
				)
			}
		)
		
		local Right = Constants.Util:Create(
			"ScrollingFrame",
			{
				Name = "Right",
				BackgroundTransparency = 1,
				Visible = false,
				BackgroundColor3 = Color3.fromRGB(45, 175, 62),
				CanvasSize = UDim2.new(0, 0, 0, 0),
				AutomaticCanvasSize = Enum.AutomaticSize.Y,
				ClipsDescendants = false,
				ScrollBarThickness = 0,
				Parent = ContainerHolder,
				Size = UDim2.new(.5, 0, 0, 350),
				Position = UDim2.new(0, 300, 0, 0)
			},
			{
				Constants.Util:Create(
					"UIListLayout"
				),
				Constants.Util:Create(
					"UIPadding",
					{
						PaddingLeft = UDim.new(0, 6)
					}
				)
			}
		)
		
		Tab.MouseEnter:Connect(function()
			if SelectedTab == nil or SelectedTab ~= Tab then
				Constants.Util:Tween(Tab.Divider, .125, {BackgroundColor3 = Constants.DefaultTheme.Tertiary})
				Constants.Util:Tween(Tab.TabText, .125, {TextColor3 = Constants.DefaultTheme.PrimaryText})
			end
		end)

		Tab.MouseLeave:Connect(function()
			if SelectedTab == nil or Tab ~= SelectedTab then
				Constants.Util:Tween(Tab.Divider, .125, {BackgroundColor3 = Constants.DefaultTheme.Divider})
				Constants.Util:Tween(Tab.TabText, .125, {TextColor3 = Constants.DefaultTheme.SecondaryText})
			end
		end)
		
		function TabTable:Select()
			SelectedTab = Tab

			task.spawn(function()
				for _, v in pairs(Containers:GetChildren()) do
					if v.Name == "ContainerHolder" then
						if v.Left ~= Left then
							v.Left.Visible = false
							v.Right.Visible = false
						end
					end
				end

				for _, v in pairs(TabContainer:GetChildren()) do
					if v.ClassName == "Frame" and v ~= Tab then
						Constants.Util:Tween(v.Divider, .125, {BackgroundColor3 = Constants.DefaultTheme.Divider})
						Constants.Util:Tween(v.TabText, .125, {TextColor3 = Constants.DefaultTheme.SecondaryText})
					end
				end
			end)

			Left.Visible = true
			Right.Visible = true
			Constants.Util:Tween(Tab.Divider, .125, {BackgroundColor3 = Constants.DefaultTheme.DarkerAccent})
			Constants.Util:Tween(Tab.TabText, .125, {TextColor3 = Constants.DefaultTheme.AccentText})
		end
		
		Tab.TabButton.MouseButton1Click:Connect(function()
			TabTable:Select()
		end)
		
		function TabTable:Section(Parameters)
			Parameters.Text = Parameters.Text or "Section"
			Parameters.Side = Parameters.Side or "Left"

			local SectionTable = {}
			
			local Section = Constants.Util:Create(
				"Frame",
				{
					Name = "Section",
					Parent = Parameters.Side == "Left" and Left or Right,
					BackgroundColor3 = Color3.fromRGB(167, 54, 54),
					BackgroundTransparency = 1,
					Size = UDim2.new(0, 286, 0, 36)
				},
				{
					Constants.Util:Create(
						"TextLabel",
						{
							Name = "SectionText",
							Size = UDim2.new(0, 286, 0, 26),
							Text = Parameters.Text,
							TextXAlignment = Enum.TextXAlignment.Left,
							TextSize = 14,
							BackgroundTransparency = 1,
							TextColor3 = Constants.DefaultTheme.PrimaryText,
							RichText = true,
							Font = Enum.Font.SourceSansBold,
							ZIndex = 2
						}
					),
					Constants.Util:Create(
						"Frame",
						{
							Name = "Divider",
							Position = UDim2.new(0, 0, 0, 28),
							Size = UDim2.new(0, 286, 0, 1),
							BackgroundColor3 = Constants.DefaultTheme.Divider
						}
					),
					Constants.Util:Create(
						"Frame",
						{
							Name = "Container",
							Size = UDim2.new(0, 286, 0, 0),
							BackgroundTransparency = 1,
							Position = UDim2.new(0, 0, 0, 38)
						},
						{
							Constants.Util:Create(
								"UIListLayout",
								{
									SortOrder = Enum.SortOrder.LayoutOrder
								}
							)
						}
					)
				}
			)
			
			local SectionY = 36
			
			SX:GetPropertyChangedSignal("Value"):Connect(function()
				local Size = SX.Value / 2 - 14
				Section.Size = UDim2.new(0, Size, 0, SectionY)
				Section.Divider.Size = UDim2.new(0, Size, 0, 1)
			end)
			
			local SectionContainer = Section.Container

			SectionContainer.ChildAdded:Connect(function()
				SectionY = SectionY + 21

				Section.Size = UDim2.new(0, 286, 0, SectionY)
				SectionContainer.Size = UDim2.new(0, 286, 0, SectionY)
			end)
			
			function SectionTable:Check(Parameters)
				Parameters.Text = Parameters.Text or "Check"
				Parameters.Flag = Parameters.Flag or nil
				Parameters.Default = Parameters.Default or false
				Parameters.Callback = Parameters.Callback or function() end

				local State = false

				local CheckTable = {}
				
				local Check = Constants.Util:Create(
					"Frame",
					{
						Name = "Check",
						Parent = SectionContainer,
						Size = UDim2.new(0, 286, 0, 21),
						BackgroundTransparency = 1,
					},
					{
						Constants.Util:Create(
							"TextButton",
							{
								Name = "CheckButton",
								Size = UDim2.new(0, 14, 0, 14),
								BackgroundTransparency = 1
							}
						),
						Constants.Util:Create(
							"Frame",
							{
								Name = "CheckFrame",
								Size = UDim2.new(0, 14, 0, 14),
								BackgroundTransparency = 1
							},
							{
								Constants.Util:Create(
									"TextLabel",
									{
										Name = "CheckText",
										Text = Parameters.Text,
										TextSize = 13,
										RichText = true,
										Font = Enum.Font.SourceSansBold,
										Size = UDim2.new(0, 14, 0, 14),
										TextXAlignment = Enum.TextXAlignment.Left,
										Position = UDim2.new(0, 20, 0, 0),
										TextColor3 = Constants.DefaultTheme.PrimaryText,
										BackgroundTransparency = 1
									}
								),
								Constants.Util:Create(
									"Frame",
									{
										Name = "CheckInner",
										AnchorPoint = Vector2.new(.5, .5),
										Position = UDim2.new(.5, 0, .5, 0),
										Size = UDim2.new(0, 12, 0, 12),
										BackgroundColor3 = Constants.DefaultTheme.Secondary
									}
								),
								Constants.Util:Create(
									"UIStroke",
									{
										Color = Constants.DefaultTheme.Divider
									}
								)
							}
						)
					}
				)
				
				local CheckButton = Check.CheckButton
				
				local TextBounds = Check.CheckFrame.CheckText.TextBounds
				local ButtonSize = TextBounds.X ~= "" and TextBounds.X + 20 or 14

				CheckButton.MouseEnter:Connect(function()
					if not State then
						Constants.Util:Tween(Check.CheckFrame.UIStroke, .125, {Color = Constants.DefaultTheme.Tertiary})
						Constants.Util:Tween(Check.CheckFrame.CheckInner, .125, {BackgroundColor3 = Constants.DefaultTheme.Hovering})
					end
				end) 
				
				CheckButton.MouseLeave:Connect(function()
					if not State then
						Constants.Util:Tween(Check.CheckFrame.UIStroke, .125, {Color = Constants.DefaultTheme.Divider})
						Constants.Util:Tween(Check.CheckFrame.CheckInner, .125, {BackgroundColor3 = Constants.DefaultTheme.Secondary})
					end
				end)

				CheckButton.Size = UDim2.new(0, ButtonSize, 0, 14)
				
				function CheckTable:Set(bool)
					task.spawn(Parameters.Callback, bool)
					State = bool
					if Parameters.Flag ~= nil then
						UI.Flags[Parameters.Flag] = bool
					end

					if State then
						Constants.Util:Tween(Check.CheckFrame.UIStroke, .125, {Color = Constants.DefaultTheme.Accent})
						Constants.Util:Tween(Check.CheckFrame.CheckInner, .125, {BackgroundColor3 = Constants.DefaultTheme.Accent})
					else
						Constants.Util:Tween(Check.CheckFrame.UIStroke, .125, {Color = Constants.DefaultTheme.Divider})
						Constants.Util:Tween(Check.CheckFrame.CheckInner, .125, {BackgroundColor3 = Constants.DefaultTheme.Secondary})
					end
				end
				
				CheckButton.MouseButton1Click:Connect(function()
					State = not State

					CheckTable:Set(State)
				end)

				return CheckTable
			end
			
			function SectionTable:Button(Info)
				Info.Text = Info.Text or "Button"
				Info.Callback = Info.Callback or function() end
			
				local Button = Constants.Util:Create(
					"Frame",
					{
						Name = "Button",
						Parent = SectionContainer,
						Size = UDim2.new(0, 286, 0, 21),
						BackgroundTransparency = 1
					},
					{
						Constants.Util:Create(
							"Frame",
							{
								Name = "ButtonFrame",
								BackgroundColor3 = Constants.DefaultTheme.Secondary,
								Size = UDim2.new(0, 14, 0, 14)
							},
							{
								Constants.Util:Create(
									"UIStroke",
									{
										Color = Constants.DefaultTheme.Divider
									}
								),
								Constants.Util:Create(
									"TextLabel",
									{
										Name = "ButtonText",
										Size = UDim2.new(1, 0, 1, 0),
										Text = Info.Text,
										RichText = true,
										Font = Enum.Font.SourceSansBold,
										BackgroundTransparency = 1,
										TextSize = 13,
										TextColor3 = Constants.DefaultTheme.PrimaryText
									}
								),
								Constants.Util:Create(
									"TextButton",
									{
										Name = "ButtonButton",
										Size = UDim2.new(1, 0, 1, 0),
										BackgroundTransparency = 1
									}
								)
							}
						)
					}
				)
				
				local Hovering = false

				Button.ButtonFrame.MouseEnter:Connect(function()
					Hovering = true
					Constants.Util:Tween(Button.ButtonFrame, .125, {BackgroundColor3 = Constants.DefaultTheme.Hovering})
					Constants.Util:Tween(Button.ButtonFrame.UIStroke, .125, {Color = Constants.DefaultTheme.AccentDivider})
				end)

				Button.ButtonFrame.MouseLeave:Connect(function()
					Hovering = false
					Constants.Util:Tween(Button.ButtonFrame, .125, {BackgroundColor3 = Constants.DefaultTheme.Secondary})
					Constants.Util:Tween(Button.ButtonFrame.UIStroke, .125, {Color = Constants.DefaultTheme.Divider})
				end)

				local TextX = math.clamp(Button.ButtonFrame.ButtonText.TextBounds.X, 15, 1000)

				Button.ButtonFrame.Size = UDim2.new(0, TextX + 10, 0, 14)

				Button.ButtonFrame.ButtonButton.MouseButton1Down:Connect(function()
					Constants.Util:Tween(Button.ButtonFrame.UIStroke, .1, {Color = Constants.DefaultTheme.Accent})
					Constants.Util:Tween(Button.ButtonFrame.ButtonText, .1, {TextColor3 = Constants.DefaultTheme.AccentText})
				end)

				Button.ButtonFrame.ButtonButton.MouseButton1Up:Connect(function()
					Constants.Util:Tween(Button.ButtonFrame.ButtonText, .1, {TextColor3 = Constants.DefaultTheme.PrimaryText})
					if Hovering then
						Constants.Util:Tween(Button.ButtonFrame.UIStroke, .125, {Color = Constants.DefaultTheme.AccentDivider})
					else
						Constants.Util:Tween(Button.ButtonFrame.UIStroke, .125, {Color = Constants.DefaultTheme.Divider})
					end
				end)

				Button.ButtonFrame.ButtonButton.MouseButton1Click:Connect(function()
					task.spawn(Info.Callback)
				end)

			end
			
			function SectionTable:Slider(Info)
				Info.Text = Info.Text or "Slider"
				Info.Flag = Info.Flag or nil
				Info.Default = Info.Default or 10
				Info.Minimum = Info.Minimum or 5
				Info.Maximum = Info.Maximum or 20
				Info.Incrementation = Info.Incrementation or 1
				Info.Postfix = Info.Postfix or ""
				Info.Callback = Info.Callback or function() end

				if Info.Minimum > Info.Maximum then
					local ValueBefore = Info.Minimum
					Info.Minimum, Info.Maximum = Info.Maximum, ValueBefore
				end

				local DefaultValue = math.clamp(Info.Default, Info.Minimum, Info.Maximum)
				local Rounded = Constants.Util:Round(DefaultValue, Info.Incrementation)

				local DefaultScale = (Rounded - Info.Minimum) / (Info.Maximum - Info.Minimum)

				local StepFormat = "%d"
				local Step = Info.Incrementation

				for i = 1, 10 do
					if Step == 1 then break end

					StepFormat = '%.' .. i .. 'f'
					if StepFormat:format(Step) == tostring(Step) then
						break
					end
				end
				
				local Slider = Constants.Util:Create(
					"Frame",
					{
						Name = "Slider",
						Parent = SectionContainer,
						Size = UDim2.new(0, 286, 0, 21),
						BackgroundTransparency = 1
					},
					{
						Constants.Util:Create(
							"Frame",
							{
								Name = "SliderOuter",
								BackgroundColor3 = Constants.DefaultTheme.Secondary,
								Size = UDim2.new(.6, 3, 0, 14)
							},
							{
								Constants.Util:Create(
									"UIStroke",
									{
										Color = Constants.DefaultTheme.AccentDivider
									}
								),
								Constants.Util:Create(
									"Frame",
									{
										Name = "SliderInner",
										BackgroundColor3 = Constants.DefaultTheme.DarkerAccent,
										Size = UDim2.fromScale(DefaultScale, 1)
									}
								),
								Constants.Util:Create(
									"TextLabel",
									{
										Name = "SliderValueText",
										Text = StepFormat:format(Rounded)..Info.Postfix,
										TextSize = 13,
										Font = Enum.Font.SourceSansBold,
										RichText = true,
										Size = UDim2.new(1, 0, 0, 14),
										TextColor3 = Color3.fromRGB(255, 255, 255),
										BackgroundTransparency = 1
									}
								),
								Constants.Util:Create(
									"TextButton",
									{
										Name = "SliderButton",
										Size = UDim2.new(1, 0, 1, 0),
										BackgroundTransparency = 1,
									}
								),
								Constants.Util:Create(
									"TextLabel",
									{
										Name = "SliderText",
										Text = Info.Text,
										TextSize = 13,
										Font = Enum.Font.SourceSansBold,
										RichText = true,
										Size = UDim2.new(1, 0, 0, 14),
										TextXAlignment = Enum.TextXAlignment.Left,
										Position = UDim2.new(1, 6, 0, 0),
										TextColor3 = Constants.DefaultTheme.PrimaryText,
										BackgroundTransparency = 1
									}
								)
							}
						)
					}
				)
				
				SX:GetPropertyChangedSignal("Value"):Connect(function()
					local Size = SX.Value / 2 - 14
					Slider.Size = UDim2.new(0, Size, 0, 21)
				end)

				Slider.SliderOuter.MouseEnter:Connect(function()
					Constants.Util:Tween(Slider.SliderOuter.UIStroke, .125, {Color = Constants.DefaultTheme.Tertiary})
					Constants.Util:Tween(Slider.SliderOuter, .125, {BackgroundColor3 = Constants.DefaultTheme.Hovering})
				end)

				Slider.SliderOuter.MouseLeave:Connect(function()
					Constants.Util:Tween(Slider.SliderOuter.UIStroke, .125, {Color = Constants.DefaultTheme.AccentDivider})
					Constants.Util:Tween(Slider.SliderOuter, .125, {BackgroundColor3 = Constants.DefaultTheme.Secondary})
					Constants.Util:Tween(Slider.SliderOuter.SliderInner, .125, {BackgroundColor3 = Constants.DefaultTheme.DarkerAccent})
				end)

				Slider.SliderOuter.SliderButton.MouseButton1Down:Connect(function()
					Constants.Util:Tween(Slider.SliderOuter.SliderInner, .125, {BackgroundColor3 = Constants.DefaultTheme.Accent})
				end)

				Slider.SliderOuter.SliderButton.MouseButton1Up:Connect(function()
					Constants.Util:Tween(Slider.SliderOuter.SliderInner, .125, {BackgroundColor3 = Constants.DefaultTheme.DarkerAccent})
				end)

				local MinSize = 0
				local MaxSize = 1

				local SizeFromScale = (MinSize +  (MaxSize - MinSize)) * DefaultScale
				SizeFromScale = SizeFromScale - (SizeFromScale % 2)

				Slider.SliderOuter.SliderButton.MouseButton1Down:Connect(function()
					local MouseMove, MouseKill
					MouseMove = Constants.Mouse.Move:Connect(function()
						local Px = Constants.Util:GetXY(Slider.SliderOuter)
						local ScaledValue = Px * (Info.Maximum - Info.Minimum) + Info.Minimum
						local RoundedValue = Constants.Util:Round(ScaledValue, Info.Incrementation)
						local FinalValue = math.clamp(RoundedValue, Info.Minimum, Info.Maximum)
						local SizeX = (FinalValue - Info.Minimum) / (Info.Maximum - Info.Minimum)
						Constants.Util:Tween(Slider.SliderOuter.SliderInner, 0.09, {Size = UDim2.new(SizeX,0,1,0)})
						if Info.Flag then
							UI.Flags[Info.Flag] = FinalValue
						end
						Slider.SliderOuter.SliderValueText.Text = StepFormat:format(FinalValue)..Info.Postfix
						task.spawn(Info.Callback, FinalValue)
					end)
					MouseKill = Defines.UserInputService.InputEnded:Connect(function(UserInput)
						if UserInput.UserInputType == Enum.UserInputType.MouseButton1 then
							MouseMove:Disconnect()
							MouseKill:Disconnect()
						end
					end)
				end)
			end
			
			function SectionTable:Label(Info)
				Info.Text = Info.Text or "Label"
				Info.Color = Info.Color or Constants.DefaultTheme.PrimaryText

				local LabelTable = {}
				
				local Label = Constants.Util:Create(
					"Frame",
					{
						Name = "Label",
						Parent = SectionContainer,
						Size = UDim2.new(0, 286, 0, 21),
						BackgroundTransparency = 1
					},
					{
						Constants.Util:Create(
							"TextLabel",
							{
								Name = "LabelText",
								Text = Info.Text,
								TextColor3 = Info.Color,
								RichText = true,
								BackgroundTransparency = 1,
								Size = UDim2.new(0, 286, 0, 14),
								TextXAlignment = Enum.TextXAlignment.Left,
								TextSize = 13,
								Font = Enum.Font.SourceSansBold
							}
						)
					}
				)
				
				function LabelTable:Set(str, color)
					str = str or Label.LabelText.Text
					color = color or Info.Color

					Label.LabelText.Text = str
					Label.LabelText.TextColor3 = color
				end

				return LabelTable
			end
			
			function SectionTable:Dropdown(Info)
				Info.Text = Info.Text or "Dropdown"
				Info.Flag = Info.Flag or nil
				Info.Multi = Info.Multi or false
				Info.Default = Info.Default or nil
				Info.List = Info.List or {}
				Info.ChangeText = Info.ChangeText or true

				local State = false

				local DropdownTable = {}
				DropdownTable.Index = Constants.DropIdx
				local DropdownY = 0
			
				local Dropdown = Constants.Util:Create(
					"Frame",
					{
						Name = "Dropdown",
						BackgroundTransparency = 1,
						Parent = SectionContainer,
						Size = UDim2.new(0, 286, 0, 21)
					},
					{
						Constants.Util:Create(
							"Frame",
							{
								Name = "DropdownFrame",
								Size = UDim2.new(.6, 3, 0, 14),
								BackgroundColor3 = Constants.DefaultTheme.Secondary,
								ClipsDescendants = true,
								ZIndex = DropdownTable.Index
							},
							{
								Constants.Util:Create(
									"UIStroke",
									{
										Color = Constants.DefaultTheme.AccentDivider
									}
								),
								Constants.Util:Create(
									"TextLabel",
									{
										Name = "DropdownText",
										BackgroundTransparency = 1,
										Text = Info.Text,
										Size = UDim2.new(1, 0, 0, 14),
										TextXAlignment = Enum.TextXAlignment.Left,
										RichText = true,
										Position = UDim2.new(0, 4, 0, 0),
										TextSize = 13,
										TextColor3 = Constants.DefaultTheme.TertiaryText,
										Font = Enum.Font.SourceSansBold,
										ZIndex = DropdownTable.Index
									}
								),
								Constants.Util:Create(
									"TextButton",
									{
										Name = "DropdownButton",
										BackgroundTransparency = 1,
										Size = UDim2.new(1, 0, 0, 14),
										ZIndex = DropdownTable.Index
									}
								),
								Constants.Util:Create(
									"Frame",
									{
										Name = "DropdownContainer",
										Size = UDim2.new(1, 0, 0, 0),
										BackgroundTransparency = 1,
										ClipsDescendants = true,
										Position = UDim2.new(0, 0, 0, 14),
										ZIndex = DropdownTable.Index
									},
									{
										Constants.Util:Create(
											"UIListLayout"
										)
									}
								),
								Constants.Util:Create(
									"Frame",
									{
										Name = "GradientHolder",
										Size = UDim2.new(0, 20, 0, 14),
										BackgroundColor3 = Color3.fromRGB(255, 255, 255),
										Position = UDim2.new(1, -41, 0, 0),
										ZIndex = DropdownTable.Index
									},
									{
										Constants.Util:Create(
											"UIGradient",
											{
												Color = ColorSequence.new({
													ColorSequenceKeypoint.new(0, Constants.DefaultTheme.Secondary),
													ColorSequenceKeypoint.new(1, Constants.DefaultTheme.Secondary),
												}),
												Transparency = NumberSequence.new({
													NumberSequenceKeypoint.new(0, 1),
													NumberSequenceKeypoint.new(1, 0),
												})
											}
										)
									}
								),
								Constants.Util:Create(
									"Frame",
									{
										Name = "DropdownImageContainer",
										Size = UDim2.new(0, 21, 0, 14),
										BackgroundColor3 = Constants.DefaultTheme.Tertiary,
										Position = UDim2.new(1, -21, 0, 0),
										ZIndex = DropdownTable.Index
									},
									{
										Constants.Util:Create(
											"UIStroke",
											{
												Color = Constants.DefaultTheme.AccentDivider
											}
										),
										Constants.Util:Create(
											"ImageLabel",
											{
												Name = "DropdownImage",
												Size = UDim2.new(0, 10, 0, 10),
												BackgroundTransparency = 1,
												Rotation = 0, -- 180
												Image = Defines.GetCAsset(Constants.DirectoryName.."/Arrow.png"),
												AnchorPoint = Vector2.new(.5, .5),
												Position = UDim2.new(.5, 0, .5, 0),
												ZIndex = DropdownTable.Index
											}
										)
									}
								)
							}
						)
					}
				)
				
				SX:GetPropertyChangedSignal("Value"):Connect(function()
					local Size = SX.Value / 2 - 14
					Dropdown.Size = UDim2.new(0, Size, 0, 21)
				end)

				Dropdown.DropdownFrame.MouseEnter:Connect(function()
					if not State then
						Constants.Util:Tween(Dropdown.DropdownFrame, .125, {BackgroundColor3 = Constants.DefaultTheme.Hovering})
					end
				end)

				Dropdown.DropdownFrame.MouseLeave:Connect(function()
					if not State then
						Constants.Util:Tween(Dropdown.DropdownFrame, .125, {BackgroundColor3 = Constants.DefaultTheme.Secondary})
					end
				end)

				local DropdownContainer = Dropdown.DropdownFrame.DropdownContainer
				local DropdownImage = Dropdown.DropdownFrame.DropdownImageContainer.DropdownImage

				function DropdownTable:Toggle(bool)
					State = bool

					if State then
						Constants.Util:Tween(Dropdown.DropdownFrame, .2, {BackgroundColor3 = Constants.DefaultTheme.Secondary})
						DropdownContainer.Size = DropdownContainer.Size + UDim2.fromOffset(0, DropdownY)
						Dropdown.DropdownFrame.Size = Dropdown.DropdownFrame.Size + UDim2.fromOffset(0, DropdownY)
						DropdownImage.Rotation = 90
					else
						DropdownContainer.Size = DropdownContainer.Size - UDim2.fromOffset(0, DropdownY)
						Dropdown.DropdownFrame.Size = Dropdown.DropdownFrame.Size - UDim2.fromOffset(0, DropdownY)
						DropdownImage.Rotation = 0
					end
				end

				if Info.Default then
					task.spawn(Info.Callback, Info.Default)
					if Info.Flag then
						UI[Info.Flag] = Info.Default
					end
					if Info.ChangeText then
						Dropdown.DropdownFrame.DropdownText.Text = Info.Default
					end
				end

				function DropdownTable:Select(v)
					task.spawn(Info.Callback, v)

					if Info.ChangeText then
						Dropdown.DropdownFrame.DropdownText.Text = v
					end
				end

				local MultiTable = {}

				local function OnPick(v)
					if Info.Multi then
						if not table.find(MultiTable, v.DropdownElementText.Text) then
							Constants.Util:Tween(v, .125, {BackgroundTransparency = .95})
							Constants.Util:Tween(v.DropdownElementText, .125, {TextColor3 = Constants.DefaultTheme.Accent})
							table.insert(MultiTable, v.DropdownElementText.Text)
						else
							Constants.Util:Tween(v, .125, {BackgroundTransparency = 1})
							Constants.Util:Tween(v.DropdownElementText, .125, {TextColor3 = Constants.DefaultTheme.PrimaryText})
							for i, e in pairs(MultiTable) do
								if v.DropdownElementText.Text == e then
									table.remove(MultiTable, i)
								end
							end
						end
						task.spawn(Info.Callback, MultiTable)

						if Info.ChangeText then
							Dropdown.DropdownFrame.DropdownText.Text = ""
							for i, z in pairs(MultiTable) do
								Dropdown.DropdownFrame.DropdownText.Text ..= i ~= #MultiTable and z..", " or z
							end
							if string.len(Dropdown.DropdownFrame.DropdownText.Text) == 0 then
								Dropdown.DropdownFrame.DropdownText.Text = Info.Text
							end
						end
					else
						DropdownTable:Select(v.DropdownElementText.Text)
						DropdownTable:Toggle(false)
					end
				end

				function DropdownTable:Refresh(table)
					for _, v in pairs(DropdownContainer:GetChildren()) do
						if v.ClassName == "Frame" then
							v:Destroy()
							DropdownY = DropdownY - 14

							if State then
								DropdownContainer.Size = DropdownContainer.Size - UDim2.fromOffset(0, 14)
								Dropdown.DropdownFrame.Size = Dropdown.DropdownFrame.Size - UDim2.fromOffset(0, 14)
							end
						end
					end

					for _, v in pairs(table) do
						warn("Set", v)
						DropdownTable:Add(v)
					end
				end
				
				function DropdownTable:Add(str)
					DropdownY = DropdownY + 14

					if State then
						DropdownContainer.Size = DropdownContainer.Size + UDim2.fromOffset(0, 14)
						Dropdown.DropdownFrame.Size = Dropdown.DropdownFrame.Size + UDim2.fromOffset(0, 14)
					end
					
					local DropdownElement = Constants.Util:Create(
						"Frame",
						{
							Name = "DropdownElement",
							Size = UDim2.new(1, 0, 0, 14),
							Parent = DropdownContainer,
							BackgroundTransparency = 1,
							ZIndex = DropdownTable.Index
						},
						{
							Constants.Util:Create(
								"TextLabel",
								{
									Name = "DropdownElementText",
									Text = str,
									Size = UDim2.new(1, 0, 1, 0),
									TextSize = 13,
									BackgroundTransparency = 1,
									RichText = true,
									TextColor3 = Constants.DefaultTheme.PrimaryText,
									Font = Enum.Font.SourceSansBold,
									ZIndex = DropdownTable.Index
								}
							),
							Constants.Util:Create(
								"TextButton",
								{
									Name = "DropdownElementButton",
									Size = UDim2.new(1, 0, 1, 0),
									BackgroundTransparency = 1,
									ZIndex = DropdownTable.Index
								}
							)
						}
					)
					
					DropdownElement.MouseEnter:Connect(function()
						if not table.find(MultiTable, DropdownElement.DropdownElementText.Text) then
							Constants.Util:Tween(DropdownElement, .125, {BackgroundTransparency = .95})
							Constants.Util:Tween(DropdownElement.DropdownElementText, .125, {TextColor3 = Constants.DefaultTheme.Accent})
						end
					end)

					DropdownElement.MouseLeave:Connect(function()
						if not table.find(MultiTable, DropdownElement.DropdownElementText.Text) then
							Constants.Util:Tween(DropdownElement, .125, {BackgroundTransparency = 1})
							Constants.Util:Tween(DropdownElement.DropdownElementText, .125, {TextColor3 = Constants.DefaultTheme.PrimaryText})
						end
					end)

					DropdownElement.DropdownElementButton.MouseButton1Click:Connect(function()
						OnPick(DropdownElement)
					end)
				end
				
				for _, v in pairs(Info.List) do
					DropdownTable:Add(v)
				end

				Dropdown.DropdownFrame.DropdownButton.MouseButton1Click:Connect(function()
					State = not State

					DropdownTable:Toggle(State)
				end)

				Constants.DropIdx = Constants.DropIdx - 1

				return DropdownTable
			end
			return SectionTable
		end
		return TabTable
	end
	return WinTable
end
return UI




